generator client {
  provider = "prisma-client-js"
  output   = "../../learnsphere-backend/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String?       // Nullable for Google OAuth users
  role         String        @default("Student") // Student, Instructor
  googleId     String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  courses      Course[]      @relation("InstructorCourses")
  enrollments  Enrollment[]
  progress     Progress[]
  ratings      Rating[]      // Ratings submitted by user
  comments     Comment[]     // Comments submitted by user
  refreshTokens RefreshToken[]
  instructorApplications InstructorApplication[]

  @@index([role])
}

model InstructorApplication {
  id        Int      @id @default(autoincrement())
  userId    Int
  status    String   @default("Pending") // Pending, Approved, Rejected
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  courses    Course[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Course {
  id           Int         @id @default(autoincrement())
  title        String
  description  String?
  instructorId Int
  instructor   User        @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  categoryId   Int
  category     Category    @relation(fields: [categoryId], references: [id])
  sessions     Session[]
  enrollments  Enrollment[]
  ratings      Rating[]    // Ratings for this course
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([instructorId])
  @@index([categoryId])
}

model Session {
  id         Int       @id @default(autoincrement())
  courseId   Int
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title      String
  youtubeUrl String?
  content    Json?
  progress   Progress[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([courseId])
}

model Enrollment {
  id         Int       @id @default(autoincrement())
  userId     Int
  courseId   Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime  @default(now())

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Progress {
  id          Int       @id @default(autoincrement())
  userId      Int
  sessionId   Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  session     Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, sessionId])
  @@index([userId])
  @@index([sessionId])
}

model Rating {
  id         Int       @id @default(autoincrement())
  courseId   Int
  userId     Int
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stars      Int       // 1-5
  review     String?   // Optional text review
  flagged    Boolean   @default(false) // For moderation
  comments   Comment[] // Comments on this rating
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([userId, courseId]) // One rating per user per course
  @@index([courseId])
  @@index([userId])
}

model Comment {
  id         Int       @id @default(autoincrement())
  ratingId   Int
  userId     Int
  rating     Rating    @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content    String    // Comment text
  flagged    Boolean   @default(false) // For moderation
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([ratingId])
  @@index([userId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
  @@index([token])
}